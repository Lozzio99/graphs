/**
  method to check the number of edges per each vertex
  @param graph with adjacency parameters
  @return the array with the number of edges per each vertex
  */
  public static int [] checkArray(int [][] graph)
  {
     int [] numberOfEdgesForEachVertices = new int [graph.length];
     for (int i = 0; i< graph.length; i++){
         for(int j = 0; j< graph.length; j++){
           int k = 0;
           int x =1;
             if (graph[i][j]==1)
               {
                 numberOfEdgesForEachVertices[i]=numberOfEdgesForEachVertices[i] +x;
                 x++;
               }
               else
               {
                 numberOfEdgesForEachVertices[i]=numberOfEdgesForEachVertices[i]+ k;
               }
             }
         } return numberOfEdgesForEachVertices;
   }
   /**
   method to find the highest value in an array
   @param numbOfEdges the array with the number of edges per each vertex
   @return the index with the maximum number of edges
   */
    public int findMax (int [] numbOfEdges )
     {
       int maximum = 0;
       int index = 0;
       for (int i = 0;i<numbOfEdges.length; i++)
        {
           if (numbOfEdges[i] >= maximum)
           {
             maximum = numbOfEdges[i];
             index = i;
           }
       }
       //set the picked value as -1 to not to be counted the next iteration
       numbOfEdges[index]= -1;
       return index;
     }
